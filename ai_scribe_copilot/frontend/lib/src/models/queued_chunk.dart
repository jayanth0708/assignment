import 'dart:typed_data';
import 'package:hive/hive.dart';

part 'queued_chunk.g.dart'; // This file would be generated by build_runner

@HiveType(typeId: 0)
class QueuedAudioChunk extends HiveObject {
  @HiveField(0)
  final String sessionId;

  @HiveField(1)
  final Uint8List chunkData;

  @HiveField(2)
  final String uniqueId; // To identify the chunk for deletion

  QueuedAudioChunk({
    required this.sessionId,
    required this.chunkData,
    required this.uniqueId,
  });
}

// Manual implementation of the TypeAdapter since I can't run build_runner.
// In a real project, `flutter pub run build_runner build` would generate this.
class QueuedAudioChunkAdapter extends TypeAdapter<QueuedAudioChunk> {
  @override
  final int typeId = 0;

  @override
  QueuedAudioChunk read(BinaryReader reader) {
    final numOfFields = reader.readByte();
    final fields = <int, dynamic>{
      for (int i = 0; i < numOfFields; i++) reader.readByte(): reader.read(),
    };
    return QueuedAudioChunk(
      sessionId: fields[0] as String,
      chunkData: fields[1] as Uint8List,
      uniqueId: fields[2] as String,
    );
  }

  @override
  void write(BinaryWriter writer, QueuedAudioChunk obj) {
    writer
      ..writeByte(3)
      ..writeByte(0)
      ..write(obj.sessionId)
      ..writeByte(1)
      ..write(obj.chunkData)
      ..writeByte(2)
      ..write(obj.uniqueId);
  }
}